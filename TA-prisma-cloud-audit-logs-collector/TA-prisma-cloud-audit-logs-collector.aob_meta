{"basic_builder": {"appname": "TA-prisma-cloud-audit-logs-collector", "friendly_name": "Prisma Cloud Audit Logs Collector", "version": "0.0.1", "author": "Simon Melotte", "description": "Pull all audit logs from prisma cloud console", "theme": "#38b8bf", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABJNJREFUWEftl19oHEUcx7+zu/cvxZqkaVrMHyEPYoOojZSmpogUCT5IQSReilupxaYll6A2iD7oi77ogw9S0Kqg2EVEX1qRoFFCUBLaJF4TFRNtmz81Ta6W/LtL0tzO7uzI7N3FS9m7vUtszIO/Y5hj5nczn/n+Zn4zR7DJjGwyHmx+oPqO61t2yp4pbrFAruptXV5gLQ8clKklwWAEoqamBMok6JYEnREYHKCM2N9Txi1+7Pj+C5+mz7NKoYYvuezb+pcpHBjPFQd45fhReJ5ZpGiKeClTQBlgCBgmoGQbjFoCNAFkMIDDAiFeyLL83vP7ukOp2VYBPds5fcYyzMNn6neAbEAwT3fvgiwV8aa685IjUFPXrEYpVT+p35G7POvw/HboBUzM92cGavlxVjN1qr7/2MYAdQ63YnRugDfV9TgrdLJbABnquwdK17Hu3H/6w6UWjM+F+ZHaC85Ar/XM2SF7+9G1AUmSBMuycibqudyKiWg/P7Sn1xnojfMCyFDffGR7zoOmHBVFAWMMnOd+PHtHQpiM/cSfqulzBnqrL6pRqquv1+UHRAgBIRI4t/ICujjWbAMdfLDfGeidcFSjuq6+ui83IKGGCJOAEZYv0C9/NmEhEmb7ay8qjsf+1EAC6ORedyABI8sykHb7UKrbgKLkYvRsENbVMA+8NOKs0AeDUU2nutq6JzvQrcqIyQu2FGAhFrNhct1H9FwQ1ngWoI9/jWq6TtUTD5VkXKATjHA2DGrDyLICoZTY5G7mCqQNRTUjTtXndmcGSm3g9MlSeycRRgWSosCkuhsPXIG++D2mUZ2q6v3bHAdzghGOlsWSmzoBJGxpaRGBQPYHg34uCJ4tZGcvxzQap+rT9zkDzc/Po7h4dV/6yUopJIAKi4owOzOdVSVXhdpHYpoeN9Qnq4szDjQ7M4OS7YlMzsUnLTOnA4l+4VtYVJhxLFeFOkZFyAz1iXszA4nRp6enUVqaeKKYpv18WrH0I+/1F0BfXlo7UNfVRS0ep+rj9xS5bsjrkQjuKitf5ZdvYnQNWT5AgiQyNYWy8ooVqLyBvgrCGsuSh/IFEiSTk5OoqKhMnrL87jL6dRDWyL8MZENdu4byykpxmWXN0qHmZpz+8CMw07AXQNuD4FfC3P9ihqtjLQql4jU2NoaqqqqMQLqu487CYizfXITIZ8KMbxIK+VtvA5CYYHhoCLuqqx0PRG1tLRoaGtDW1rbSb3QkgUK3CSjb0fx5cBC7a2rsR1xKIfP7INhomPtP/AdAAlZcuESSYSTvObOz0T5lvmNXnJ8f69lDrokr6SCy+YpCXY2wxge47+ilzED9kXjjy3u3ub8dciXI4sf7arg5vATvkQxA7b/d2Pn5hBUxQYwDZT5PaiwCDi+YXTwwoNi1CUVK1DIYFGJCEW3J2m6zfU3IK23Cl0ImFGy2F3ewAeYdn59U1D/u/meuW1Zw+LsbIXB+SmTddFNgIUAMFECHH9QuPkLhhQE/ofAQCh8oPHa7Dq9E4eWiPw6v3a/bxcvj8BDRdhMBhUZKHv6sLH2eDfgHn19s/wdy0+tvwy+qQ1bGAIYAAAAASUVORK5CYII=", "visible": true, "tab_version": "4.0.0", "tab_build_no": "0", "build_no": 2}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "prismacloud:audit", "interval": "60", "use_external_validation": true, "streaming_mode_xml": true, "name": "audit_logs_from_prisma_cloud", "title": "Audit logs from Prisma Cloud", "description": "Collect audit logs from prisma cloud console.", "type": "customized", "parameters": [{"name": "base_url", "label": "Base URL", "help_string": "", "required": true, "possible_values": [{"value": "api.prismacloud.io", "label": "api.prismacloud.io"}, {"value": "api.eu.prismacloud.io", "label": "api.eu.prismacloud.io"}, {"value": "api2.eu.prismacloud.io", "label": "api2.eu.prismacloud.io"}], "format_type": "dropdownlist", "default_value": "api.prismacloud.io", "placeholder": "Select an API endpoint", "type": "dropdownlist", "value": "api.eu.prismacloud.io"}, {"name": "access_key", "label": "Access Key", "help_string": "You can create a access key within your prisma cloud console from settings menu then access keys", "required": true, "format_type": "text", "default_value": "", "placeholder": "00000000-0000-0000-0000-000000000000", "type": "text", "value": "6cb6bcb9-09ab-4e74-b073-c6855ed984ef"}, {"name": "secret_key", "label": "Secret Key", "help_string": "You can create a secret key within your prisma cloud console from settings menu then access key", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "0rtgwXIUqu2wyOAzTD4rofqzAxQ="}, {"name": "time_amount", "label": "Time Amount", "help_string": "Time interval that you want to collect. Default is one minute.", "required": true, "format_type": "text", "default_value": "1", "placeholder": "", "type": "text", "value": "1"}, {"name": "time_unit", "label": "Time Unit", "help_string": "Will be use for the time interval", "required": true, "possible_values": [{"value": "minute", "label": "Minute"}, {"value": "hour", "label": "Hour"}, {"value": "day", "label": "Day"}], "format_type": "dropdownlist", "default_value": "minute", "placeholder": "", "type": "dropdownlist", "value": "minute"}], "data_inputs_options": [{"type": "customized_var", "name": "base_url", "title": "Base URL", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "api.prismacloud.io", "label": "api.prismacloud.io"}, {"value": "api.eu.prismacloud.io", "label": "api.eu.prismacloud.io"}, {"value": "api2.eu.prismacloud.io", "label": "api2.eu.prismacloud.io"}], "format_type": "dropdownlist", "default_value": "api.prismacloud.io", "placeholder": "Select an API endpoint"}, {"type": "customized_var", "name": "access_key", "title": "Access Key", "description": "You can create a access key within your prisma cloud console from settings menu then access keys", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "00000000-0000-0000-0000-000000000000"}, {"type": "customized_var", "name": "secret_key", "title": "Secret Key", "description": "You can create a secret key within your prisma cloud console from settings menu then access key", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "time_amount", "title": "Time Amount", "description": "Time interval that you want to collect. Default is one minute.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "1", "placeholder": ""}, {"type": "customized_var", "name": "time_unit", "title": "Time Unit", "description": "Will be use for the time interval", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "minute", "label": "Minute"}, {"value": "hour", "label": "Hour"}, {"value": "day", "label": "Day"}], "format_type": "dropdownlist", "default_value": "minute", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\n\n\nKV_TOKEN = 'prisma_cloud_api_token'\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    opt_base_url = definition.parameters.get('base_url', None)\n    opt_access_key = definition.parameters.get('access_key', None)\n    opt_secret_key = definition.parameters.get('secret_key', None)\n    opt_time_unit = definition.parameters.get('time_unit', None)\n    opt_interval = int(definition.parameters.get('interval', None))\n    opt_time_amount = int(definition.parameters.get('time_amount', None))\n    \n    url = \"https://%s/login\" % ( opt_base_url )\n\n    payload = json.dumps({\n        \"username\": opt_access_key,\n        \"password\": opt_secret_key\n    })\n    headers = {\"content-type\": \"application/json; charset=UTF-8\"}\n    \n    \n    response = helper.send_http_request(url, 'POST', parameters=None, payload=payload,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=False)\n                                        \n    r_status = response.status_code\n    \n    if r_status != 200:\n        raise ValueError(\"Authentication failed! Please verify base url, access key and the secret key. Return code is {}\".format( str(r_status) ) )\n    elif (opt_interval < 60):\n        raise ValueError(\"Interval should greater than 60 and equal to time amount by the time unit\")\n    elif (opt_time_unit == \"minute\"):\n        divide = opt_interval/60\n        if (opt_time_amount == divide):\n            pass\n        else:\n            raise ValueError(\"Interval should greater than 60 and equal to time amount by the time unit\")\n    elif (opt_time_unit == \"hour\"):\n        divide = opt_interval/3600\n        if (opt_time_amount == divide):\n            pass\n        else:\n            raise ValueError(\"Interval should greater than 60 and equal to time amount by the time unit\")\n    else:\n        divide = opt_interval/86400\n        if (opt_time_amount == divide):\n            pass\n        else:\n            raise ValueError(\"Interval should greater than 60 and equal to time amount by the time unit\")\n    \n        \n    pass\n\ndef collect_events(helper, ew):\n    opt_base_url = helper.get_arg('base_url')\n    opt_access_key = helper.get_arg('access_key')\n    opt_secret_key = helper.get_arg('secret_key')\n    opt_time_amount = helper.get_arg('time_amount')\n    opt_time_unit = helper.get_arg('time_unit')\n    \n    ## GET EXISTING TOKEN FROM KV STORE\n    token = helper.get_check_point(KV_TOKEN)\n    \n    if not token:\n        ## CREATE TOKEN IF ID DOES NOT EXISTS\n        helper.log_info(\"Creating an token\")\n        login(helper, opt_base_url, opt_access_key, opt_secret_key)\n        token = helper.get_check_point(KV_TOKEN)\n        \n    else:\n        helper.log_info(\"Use token from KV Store and extend it.\")\n        status = extendToken(helper, opt_base_url, token)\n        if status != 200:\n            helper.log_info(\"Token expired, renew token.\")\n            login(helper, opt_base_url, opt_access_key, opt_secret_key)\n            token = helper.get_check_point(KV_TOKEN)\n            \n        \n    ## GET AUDIT LOGS\n    auditLogs = getAuditLogs(helper, opt_base_url, opt_time_amount, opt_time_unit, token)\n    \n    for log in auditLogs:\n        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(log))\n        ew.write_event(event)\n        \n\ndef login(helper, opt_base_url, opt_access_key, opt_secret_key):\n    url = \"https://%s/login\" % ( opt_base_url )\n        \n    payload = json.dumps({\n        \"username\": opt_access_key,\n        \"password\": opt_secret_key\n    })\n    headers = {\"content-type\": \"application/json; charset=UTF-8\"}\n    \n    response = helper.send_http_request(url, 'POST', parameters=None, payload=payload,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=False)\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n        \n    token = response.json()['token']\n    helper.save_check_point(KV_TOKEN, token)\n    \ndef extendToken(helper, opt_base_url, token):\n    ## EXTEND TOKEN IF IT EXISTS\n    url = \"https://%s/auth_token/extend\" % ( opt_base_url )\n    # helper.log_info(\"AUDITLOGS FROM EVENT ==URL: \" + url)\n    headers = {\"x-redlock-auth\": token}\n\n    response = helper.send_http_request(url, 'GET', parameters=None, payload=None,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=False)\n        \n    token = response.json()['token']\n    helper.save_check_point(KV_TOKEN, token)\n    \n    return response.status_code\n    \ndef getAuditLogs(helper, opt_base_url, opt_time_amount, opt_time_unit, token):\n    url = \"https://%s/audit/redlock\" % ( opt_base_url )\n    querystring = {\"timeType\":\"relative\",\"timeAmount\":opt_time_amount,\"timeUnit\":opt_time_unit}\n    headers = {\"x-redlock-auth\": token}\n    response = helper.send_http_request(url, 'GET', parameters=querystring, payload=None,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=False)\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n    \n    ## PARSE AUDIT LOGS\n    return response.json()\n", "customized_options": [{"name": "base_url", "value": "api.eu.prismacloud.io"}, {"name": "access_key", "value": "6cb6bcb9-09ab-4e74-b073-c6855ed984ef"}, {"name": "secret_key", "value": "0rtgwXIUqu2wyOAzTD4rofqzAxQ="}, {"name": "time_amount", "value": "1"}, {"name": "time_unit", "value": "minute"}], "uuid": "ec3a18a4501241bdbd9dd02949634a9b", "sample_count": "679"}]}, "field_extraction_builder": {"prismacloud:audit": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}}}, "sourcetype_builder": {"prismacloud:audit": {"metadata": {"event_count": 0, "data_input_name": "audit_logs_from_prisma_cloud", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation"], "status": "job_finished", "validation_id": "v_1637349947_51", "progress": 1.0}}